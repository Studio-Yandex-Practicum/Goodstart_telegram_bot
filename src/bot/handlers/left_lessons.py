# TODO: –¥–æ–ª–∂–Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ —É—á–µ–Ω–∏–∫–∞–º
from telegram import (
    Update,
)
from telegram.ext import CommandHandler, ContextTypes

from core.logging import log_errors
from schooling.models import Teacher, Student
from bot.utils import check_user_from_db

from bot.states import UserStates


@log_errors
async def left_lessons(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
):
    """
    `/left_lessons` command handler.

    If the user is registered in the database and role student, sends message,
    with left payed lessons.
    """
    telegram_id = update.effective_chat.id
    user = await check_user_from_db(telegram_id, (Teacher, Student))
    if not user or user.__class__.__name__ != 'Student':
        await context.bot.send_message(
            chat_id=telegram_id,
            text=(
                'üìå –í–Ω–∏–º–∞–Ω–∏–µ!\n\n'
                '–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤.'
            ),
        )
    else:
        left = user.paid_lessons
        if left == 0 or left > 4:
            lesson = '–∑–∞–Ω—è—Ç–∏–π'
        else:
            lesson = '–∑–∞–Ω—è—Ç–∏—è'
        await update.message.reply_text(
            f'üìå {user.name}!\n\n'
            f'–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {user.paid_lessons} –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö {lesson}.',
        )
    return UserStates.START

left_lessons_handler = CommandHandler(left_lessons.__name__, left_lessons,)
