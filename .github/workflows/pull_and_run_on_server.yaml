name: CD

on:
  push:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  tests:
    name: Run tests
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
    -
      name: Check out the repo
      uses: actions/checkout@v2
    -
      name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.12
    -
      name: Install dependencies
      run: |
        pip install poetry
        poetry install --without dev --no-root
        pip install pytest
    -
      name: Test with pytest
      run: pytest
#   build_and_push:
#     runs-on: ubuntu-latest
#     needs: 
#       - tests
#     steps:
#       - uses: actions/checkout@v3
#       - name: Login to GitHub Container Registry
#         uses: docker/login-action@v3
#         with:
#           registry: ${{ env.REGISTRY }}
#           username: ${{ github.actor }}
#           password: ${{ secrets.GITHUB_TOKEN }}
#       - name: Extract metadata for Docker
#         id: meta
#         uses: docker/metadata-action@v5
#         with:
#           images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

#       - name: Build and push Docker image for Production
#         uses: docker/build-push-action@v5
#         with:
#           context: .
#           file: infra/prod/prod.Dockerfile
#           push: true
#           tags: ${{ steps.meta.outputs.tags }}
#           labels: ${{ steps.meta.outputs.labels }}
      
#       - name: Build and push Docker image for Stage
#         uses: docker/build-push-action@v5
#         with:
#           context: . 
#           file: infra/dev/dev.Dockerfile
#           push: true
#           tags: ${{ steps.meta.outputs.tags }}
#           labels: ${{ steps.meta.outputs.labels }}
  deploy:
    runs-on: ubuntu-latest
    needs: 
      - tests
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
    - name: Copy docker-compose.production.yaml via ssh
      uses: appleboy/scp-action@v0.1.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        source: "infra/prod/docker-compose.production.yaml"
        target: "Goodstart_telegram_bot"
    - name: Copy Dockerfile via ssh
      uses: appleboy/scp-action@v0.1.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        source: "infra/Dockerfile"
        target: "Goodstart_telegram_bot"
    - name: Copy nginx.conf via ssh
      uses: appleboy/scp-action@v0.1.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        source: "infra/nginx.conf"
        target: "Goodstart_telegram_bot"
    - name: Executing remote ssh commands to deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        timeout: 120s
        script: |
          cd Goodstart_telegram_bot/infra/prod
          # Выполняет pull образов с Docker Hub
          sudo docker compose -f docker-compose.production.yaml pull
          # Перезапускает все контейнеры в Docker Compose
          sudo docker compose -f docker-compose.production.yaml down
          sudo docker compose -f docker-compose.production.yaml up -d
          # Выполняет удаление старых образов
          sudo docker image prune -f